@page "/"
@rendermode InteractiveServer
@inject NavigationManager Navigation

<PageTitle>Home</PageTitle>

<MudText  Typo="Typo.h4" GutterBottom="true">Dashboard</MudText>

<div class="container">
    <div class=" align-left row">
        <div class="col">
            <MudText Typo="Typo.h4">Most Active Reader:</MudText>
            <MudText Class="pl-2">@getMostActiveReader() </MudText>
            <MudText Typo="Typo.h4">Most Active User:</MudText>
            <MudText Class="pl-2">@getMostActiveUser() </MudText>
            <MudText Typo="Typo.h4">Average Unique scans per day:</MudText>
            <MudText Class="pl-2">@getAverageActivity() </MudText>
            <MudText Typo="Typo.h4">Busiest Day of the Week:</MudText>
            <MudText Class="pl-2">@getMostActiveDayOfWeek() </MudText>
        </div>

        <div class="col">
            @if(DictionariesCreated)
            {
                <table class="table">
                    <thead>
                        <th scope="col" >Alerts</th>
                    </thead>
                    @foreach(Alert alert in AlertSystem.findAlerts()){
                        <tr scope="row">
                            <td>@alert.alertDescription</td>
                        </tr>
                    }
                </table>
            }
        </div>
    </div>
</div>
        
<div>
    <div Style="display: inline-flex">
        <MudText Typo="Typo.h5">Scans over Time</MudText>
        <MudTextField @bind-Value="chartStartDate" Label="Start Date" Variant="Variant.Outlined"Margin="Margin.Dense" Width="20%"></MudTextField>
        <MudTextField @bind-Value="chartEndDate" Label="End Date" Variant="Variant.Outlined" Margin="Margin.Dense" Width="20%"></MudTextField>
    </div>
    @if(DictionariesCreated){
        <MudChart Class="align-content-center" ChartType="ChartType.Line" ChartSeries="@getChartData()" XAxisLabels="@getChartLabels()" ChartOptions="Options" AxisChartOptions="axisChartOptions" Width="100%" Height="400px"></MudChart>
    }
</div>


@code{
    public static bool DictionariesCreated = false;
    public string ErrorMessage { get; set; } = "";
    public string FileName {get; set;} = "";
    const int MAX_FILESIZE = 50000 * 1024;
    public AxisChartOptions axisChartOptions = new AxisChartOptions(); 
    public ChartOptions Options = new ChartOptions();
    public string chartStartDate {get; set;} = "";
    public string chartEndDate {get; set;} = "";

    public string getMostActiveReader()
    {
        string mostActiveReader = "";
        int mostActiveCount = 0;
        if(DictionariesCreated)
        {
            foreach(KeyValuePair<int, List<ReaderEvent>> r in FileStorage.ReaderDictionary)
            {
                if(r.Value.Count() > mostActiveCount){
                    mostActiveCount = r.Value.Count();
                    mostActiveReader = r.Value[0].ReaderDescription;
                }
            }
        }
        return mostActiveReader;
    }

    public string getMostActiveUser()
    {
        string mostActiveUser = "";
        int mostActiveCount = 0;
        if(DictionariesCreated)
        {
            foreach(KeyValuePair<string, List<ReaderEvent>> r in FileStorage.HashDictionary)
            {
                int valueCount = r.Value.Count();
                if(valueCount > mostActiveCount){
                    mostActiveCount = valueCount;
                    mostActiveUser = r.Key;
                }
            }
        }
        return mostActiveUser;
    }
    
    public float getAverageActivity()
    {
        if(DictionariesCreated)
        {
        List<int> UniqueCounts = new List<int>();
        List<string> hashSeen = new List<string>();
        foreach(KeyValuePair<string, List<ReaderEvent>> r in FileStorage.DateDictionary)
        {
            
            UniqueCounts.Add(0);
            foreach(ReaderEvent e in r.Value)
            {
                if(!hashSeen.Contains(e.IDHash))
                {
                    UniqueCounts[UniqueCounts.Count - 1] ++;
                    hashSeen.Add(e.IDHash);
                }
            }
            hashSeen.Clear();
        }

        int totalUniqueCounted = 0;
        foreach(int i in UniqueCounts)
        {
            totalUniqueCounted += i;
        }
        return totalUniqueCounted / FileStorage.DateDictionary.Count();
        }
        return 0;
    }

    public DayOfWeek getMostActiveDayOfWeek()
    {
        DayOfWeek mostActiveDay = DayOfWeek.Sunday;
        if(DictionariesCreated)
        {
            Dictionary<DayOfWeek, List<ReaderEvent>> D = new Dictionary<DayOfWeek, List<ReaderEvent>>();
            Dictionary<DayOfWeek, int> dayCounts = new Dictionary<DayOfWeek, int>();
            foreach(KeyValuePair<string, List<ReaderEvent>> value in FileStorage.DateDictionary)
            {
                DayOfWeek day = value.Value.First().EventTimeStamp.DayOfWeek;
                foreach(ReaderEvent e in value.Value)
                {
                    if(D.ContainsKey(day))
                    {   
                        D[day].Add(e);
                    }else{
                        D.Add(day, new List<ReaderEvent>());
                        D[day].Add(e);
                    }
                }

                
                if(dayCounts.ContainsKey(day))
                {
                    dayCounts[day]++;
                }else{
                    dayCounts.Add(day, 1);
                }
            }

    
            int mostActive = 0;
            foreach(KeyValuePair<DayOfWeek, List<ReaderEvent>> k in D)
            {
                if(k.Value.Count()/dayCounts[k.Key] > mostActive)
                {
                    mostActiveDay = k.Key;
                    mostActive = k.Value.Count()/dayCounts[k.Key];
                }
            }

        }
        return mostActiveDay;

    }

    public List<ChartSeries> getChartData()
    {
        if(chartStartDate.Equals(""))
        {
            chartStartDate = FileStorage.DateDictionary.Keys.First();
            chartEndDate = FileStorage.DateDictionary.Keys.Last();
        }

        List<double> countsPerDay = new List<double>();
        foreach(KeyValuePair<string, List<ReaderEvent>> r in FileStorage.DateDictionary)
        {
            DateTime TimeStamp = DateTime.Parse(r.Value[0].EventTimeStamp.ToString("MMM dd"));
        
            if((TimeStamp.CompareTo(DateTime.Parse(chartStartDate)) >= 0) && (TimeStamp.CompareTo(DateTime.Parse(chartEndDate)) <= 0))
            {
                countsPerDay.Add(r.Value.Count());
            }
        }

        return new List<ChartSeries>{new ChartSeries{Name = "Scans per day", Data = countsPerDay.ToArray()}};
    }

    public string[] getChartLabels()
    {
        List<string> returnValues = new List<string>(); 
    
        if(DictionariesCreated){

        foreach(KeyValuePair<string, List<ReaderEvent>> r in FileStorage.DateDictionary)
        {
             DateTime TimeStamp = DateTime.Parse(r.Value[0].EventTimeStamp.ToString("MMM dd"));

            if((TimeStamp.CompareTo(DateTime.Parse(chartStartDate)) >= 0) && (TimeStamp.CompareTo(DateTime.Parse(chartEndDate)) <= 0)){
                returnValues.Add(r.Key);
            }

        }

            axisChartOptions.MatchBoundsToSize = true;
            Options.InterpolationOption = InterpolationOption.NaturalSpline;
        }else{
            returnValues.Add("No Data Uploaded");
        }
        return returnValues.ToArray();
    }

}